{"version":3,"sources":["DayComponent.jsx","App.js","index.js"],"names":["DayWrapper","styled","div","LineWrapper","Hourly","Frame","Button","button","DayComponent","dayData","useState","showMore","setShowMore","date","Date","slice","Number","toString","toLocaleDateString","weekday","year","month","day","temp_max_c","temp_min_c","humid_min_pct","Math","floor","slp_min_mb","windspd_max_ms","onClick","Timeframes","map","timeFrame","i","feelslike_c","wx_desc","src","wx_icon","alt","AppWrapper","App","weather","setWeaather","useEffect","fetch","mode","then","response","json","data","Days","console","log","moonrise_time","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAGMA,EAAaC,IAAOC,IAAV,iVAgBVC,EAAcF,IAAOC,IAAV,4NAYXE,EAASH,IAAOC,IAAV,8GAONG,EAAQJ,IAAOC,IAAV,uUAmBLI,EAASL,IAAOM,OAAV,8PAgBCC,EAAe,SAAC,GAAiB,IAAfC,EAAc,EAAdA,QAAc,EACXC,oBAAS,GADE,mBACpCC,EADoC,KAC1BC,EAD0B,KAEvCC,EAAO,IAAIC,KACbL,EAAQI,KAAKE,OAAO,IACnBC,OAAOP,EAAQI,KAAKE,OAAO,GAAI,IAAM,GAAGE,WACzCR,EAAQI,KAAKE,OAAO,IAAK,IAQ3B,OACE,eAACf,EAAD,WACE,eAACG,EAAD,WACE,uCACA,4BAAIU,EAAKK,mBAAmB,QAVlB,CACdC,QAAS,OACTC,KAAM,UACNC,MAAO,OACPC,IAAK,iBAQH,eAACnB,EAAD,WACE,kDACA,8BAAIM,EAAQc,WAAZ,eAEF,eAACpB,EAAD,WACE,kDACA,8BAAIM,EAAQe,WAAZ,eAEF,eAACrB,EAAD,WACE,2CACA,8BAAIM,EAAQgB,cAAZ,WAEF,eAACtB,EAAD,WACE,2CACA,8BAAIuB,KAAKC,MAAOlB,EAAQmB,WAAa,QAAW,KAAhD,cAEF,eAACzB,EAAD,WACE,6CACA,8BAAIM,EAAQoB,eAAZ,aAEF,cAACvB,EAAD,CAAQwB,QAAS,kBAAMlB,GAAaD,IAApC,SACGA,EAAW,OAAS,SAEtBA,GACC,cAACP,EAAD,UACGK,EAAQsB,WAAWC,KAAI,SAACC,EAAWC,GAClC,OACE,eAAC7B,EAAD,WACE,gCACE,8BACO,EAAJ6B,EADH,SAC0B,GAATA,EAAI,GADrB,SAGA,6CAAgBD,EAAUE,eAC1B,4BACE,4BAAIF,EAAUG,eAGlB,qBACEC,IAAG,gBAAWJ,EAAUK,QAAQvB,MAAM,GAAI,GAAvC,OACHwB,IAAI,wBAZIN,EAAUpB,KAAOqB,YClHrCM,EAAavC,IAAOC,IAAV,8dAoDDuC,EA1BH,WAAO,IAAD,EACe/B,qBADf,mBACTgC,EADS,KACAC,EADA,KAehB,OAbAC,qBACE,kBACEC,MACE,mHACA,CACEC,KAAM,YAGPC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAUP,EAAYO,EAAKC,WACrC,IAEFC,QAAQC,IAAIX,GAEV,eAACF,EAAD,WACE,4DACCE,GACCA,EAAQV,KAAI,SAACV,GAAD,OACV,cAAC,EAAD,CAAiDb,QAASa,GAAvCA,EAAIT,KAAOS,EAAIgC,sBC9C5CC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.86e0e222.chunk.js","sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst DayWrapper = styled.div`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  min-width: 300px;\n  width: 98%;\n  max-width: 1200px;\n  padding: 2px;\n  margin: 5px;\n  box-sizing: border-box;\n  border-radius: 10px;\n  border: 1px solid black;\n  background-color: rgba(0.3, 0.3, 0.3, 0.5);\n`;\n\nconst LineWrapper = styled.div`\n  width: 80%;\n  display: flex;\n  justify-content: space-between;\n  border-bottom: 1px solid lightgray;\n  p {\n    color: #fff;\n    font-weight: 900;\n    text-shadow: #000 0 0 5px;\n  }\n`;\n\nconst Hourly = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: center;\n  width: 100%;\n`;\n\nconst Frame = styled.div`\n  width: 145px;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: space-between;\n  background-color: #333333af;\n  margin: 2px;\n  border-radius: 10px;\n  p {\n    color: #fff;\n    text-align: center;\n    margin: 5px;\n  }\n  img {\n    width: 120px;\n  }\n`;\n\nconst Button = styled.button`\n  width: 80%;\n  font-size: 16px;\n  padding: 3px 10px;\n  margin: 5px;\n  border-radius: 10px;\n  cursor: pointer;\n  :focus {\n    outline: none;\n  }\n  :hover {\n    box-shadow: 0px 0px 8px black;\n    opacity: 0.6;\n  }\n`;\n\nexport const DayComponent = ({ dayData }) => {\n  const [showMore, setShowMore] = useState(false);\n  let date = new Date(\n    dayData.date.slice(-4),\n    (Number(dayData.date.slice(-7, -5)) - 1).toString(),\n    dayData.date.slice(-10, -8)\n  );\n  const options = {\n    weekday: \"long\",\n    year: \"numeric\",\n    month: \"long\",\n    day: \"numeric\",\n  };\n  return (\n    <DayWrapper>\n      <LineWrapper>\n        <p>Date: </p>\n        <p>{date.toLocaleDateString(\"en-EN\", options)}</p>\n      </LineWrapper>\n      <LineWrapper>\n        <p>Max.temperature: </p>\n        <p>{dayData.temp_max_c} °C</p>\n      </LineWrapper>\n      <LineWrapper>\n        <p>Min.temperature: </p>\n        <p>{dayData.temp_min_c} °C</p>\n      </LineWrapper>\n      <LineWrapper>\n        <p>Humidity: </p>\n        <p>{dayData.humid_min_pct} %</p>\n      </LineWrapper>\n      <LineWrapper>\n        <p>Pressure: </p>\n        <p>{Math.floor((dayData.slp_min_mb / 1013.25) * 760)} mmHg</p>\n      </LineWrapper>\n      <LineWrapper>\n        <p>Wind speed: </p>\n        <p>{dayData.windspd_max_ms} m/s</p>\n      </LineWrapper>\n      <Button onClick={() => setShowMore(!showMore)}>\n        {showMore ? \"Less\" : \"More\"}\n      </Button>\n      {showMore && (\n        <Hourly>\n          {dayData.Timeframes.map((timeFrame, i) => {\n            return (\n              <Frame key={timeFrame.date + i}>\n                <div>\n                  <p>\n                    {i * 3}:00 - {(i + 1) * 3}:00\n                  </p>\n                  <p>Feels like: {timeFrame.feelslike_c}</p>\n                  <p>\n                    <b>{timeFrame.wx_desc}</b>\n                  </p>\n                </div>\n                <img\n                  src={`./img/${timeFrame.wx_icon.slice(0, -3)}png`}\n                  alt=\"Weather ilustrate\"\n                />\n              </Frame>\n            );\n          })}\n        </Hourly>\n      )}\n    </DayWrapper>\n  );\n};\n","import { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\n\nimport { DayComponent } from \"./DayComponent\";\n\nconst AppWrapper = styled.div`\n  position: relative;\n  height: calc(100vh - 48px);\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  overflow: scroll;\n  margin-top: 48px;\n  @media (min-width: 420px) {\n    height: calc(100vh - 72px);\n    margin-top: 72px;\n  }\n\n  > h1 {\n    position: fixed;\n    font-size: 20px;\n    top: 0px;\n    left: 0;\n    right: 0;\n    text-align: center;\n    @media (min-width: 420px) {\n      font-size: 2em;\n    }\n  }\n`;\n\nconst App = () => {\n  const [weather, setWeaather] = useState();\n  useEffect(\n    () =>\n      fetch(\n        \"http://api.weatherunlocked.com/api/forecast/50.27,30.31?app_id=231e22db&app_key=992c0bfbce0848660ff960fc64beea9c\",\n        {\n          mode: \"no-cors\",\n        }\n      )\n        .then((response) => response.json())\n        .then((data) => setWeaather(data.Days)),\n    []\n  );\n  console.log(weather);\n  return (\n    <AppWrapper>\n      <h1>Weather in Kyiv for 7 days</h1>\n      {weather &&\n        weather.map((day) => (\n          <DayComponent key={day.date + day.moonrise_time} dayData={day} />\n        ))}\n    </AppWrapper>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}